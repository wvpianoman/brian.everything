# Command to reload system configurations:
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# System Reload Command
#  sudo udevadm control --reload-rules && sudo udevadm trigger && sudo sysctl --system

# alias sysctl-reload="sudo udevadm control --reload-rules && sudo udevadm trigger && sudo sysctl --system"
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# About These Settings
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# These configurations aim to optimize various aspects of the Linux system, including network performance, file systems, and kernel behavior.
# The tweaks are inspired by configurations from RHEL, Fedora, Solus, Mint, Cachy, Ultramarine and Windows Server. Adjustments have been made
# based on personal experimentation and preferences.  Keep in mind that before applying these tweaks, it's recommended to test in a controlled
# environment and monitor system behavior.
#
# Tolga Erok

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Virtual Memory Management
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Contains, as a bytes of total available memory that contains free pages and reclaimable
# pages, the number of pages at which the background kernel flusher threads will start writing out
# dirty data.
vm.dirty_background_bytes = 474217728

vm.dirty_background_ratio = 5                  # Percentage of system memory at which background writeback starts

# Contains, as a bytes of total available memory that contains free pages and reclaimable
# pages, the number of pages at which the background kernel flusher threads will start writing out
# dirty data. (adjusted for SSD)
vm.dirty_bytes = 742653184

# This tunable is used to define when dirty data is old enough to be eligible for writeout by the
# kernel flusher threads.  It is expressed in 100'ths of a second.  Data which has been dirty
# in-memory for longer than this interval will be written out next time a flusher thread wakes up
# (Default is 3000).
vm.dirty_expire_centisecs = 3000

vm.dirty_ratio = 80                            # Set the ratio of dirty memory at which a process is forced to write out dirty data (10%). Adjusted for SSD.

# The kernel flusher threads will periodically wake up and write old data out to disk.  This
# tunable expresses the interval between those wakeups, in 100'ths of a second (Default is 500).
vm.dirty_writeback_centisecs = 1500

vm.extfrag_threshold = 100                     # Fragmentation threshold for the kernel

# This file contains the maximum number of memory map areas a process may have. Memory map areas are used as a side-effect of calling malloc, directly by mmap, mprotect, and
# madvise, and also when loading shared libraries. While most applications need less than a thousand maps, certain programs, particularly malloc debuggers, may consume lots
# of them, e.g., up to one or two maps per allocation.  The default value is 65536
# Value is higher set to fix games like DayZ, Hogwarts Legacy, Counter Strike 2
# Automatically handeled by the CachyOS kernel, see this commit: https://github.com/CachyOS/linux/commit/ad252ae5f828a24f173fb99b65009aa2105836af
vm.max_map_count = 2147483642

vm.min_free_kbytes=212000                      # Minimum free kilobytes
vm.mmap_min_addr = 65536                       # Minimum address allowed for a user-space mmap

# page-cluster controls the number of pages up to which consecutive pages are read in from swap in a single attempt.
# This is the swap counterpart to page cache readahead. The mentioned consecutivity is not in terms of virtual/physical addresses,
# but consecutive on swap space - that means they were swapped out together. (Default is 3)
# increase this value to 1 or 2 if you are using physical swap (1 if ssd, 2 if hdd)
vm.page-cluster = 0

# The sysctl swappiness parameter determines the kernel's preference for pushing anonymous pages or page cache to disk in memory-starved situations.
# A low value causes the kernel to prefer freeing up open files (page cache), a high value causes the kernel to try to use swap space,
# and a value of 100 means IO cost is assumed to be equal.
vm.swappiness = 10

# The value controls the tendency of the kernel to reclaim the memory which is used for caching of directory and inode objects (VFS cache).
# Lowering it from the default value of 100 makes the kernel less inclined to reclaim VFS cache (do not set it to 0, this may produce out-of-memory conditions)
vm.vfs_cache_pressure=50

# Linux System Optimization
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# FileSystem Tweaks
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
fs.aio-max-nr = 1048576                        # Defines the maximum number of asynchronous I/O requests that can be in progress at a given time.

# Set size of file handles and inode cache
fs.file-max = 67108864

# Set the maximum watches on files (default 8192)
fs.inotify.max_user_watches = 524288

fs.suid_dumpable=2                             # Set SUID_DUMPABLE flag. 0 means not core dump, 1 means core dump, and 2 means core dump with setuid

# Increase writeback interval  for xfs
fs.xfs.xfssyncd_centisecs = 10000

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Kernel Tweaks
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Disable/Enable core dumps
# kernel.core_pattern = /dev/null
kernel.core_pattern=|/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h

kernel.core_uses_pid = 1                       # Append the PID to the core filename

# This action will speed up your boot/shutdown, because one less module is loaded. Disabling watchdog timers increases performance and lowers power consumption
# Disable NMI watchdog
kernel.nmi_watchdog = 0

# Disable Kexec, which allows replacing the current running kernel.
kernel.kexec_load_disabled = 1

# Restricting access to kernel pointers in the proc filesystem
kernel.kptr_restrict = 2

# To hide any kernel messages from the console
# kernel.printk = 3 3 3 3

kernel.panic = 5                               # Reboot after 5 seconds on kernel panic. Default: 0
kernel.pid_max = 4194304                       # Allows a large number of processes and threads to be managed. Default: 32768
kernel.pty.max = 24000                         # Maximum number of pseudo-terminals (PTYs) in the system
kernel.sched_autogroup_enabled = 0             # Disable automatic task grouping for better server performance

# Increase the sched_rt_runtime_us to mitigate issues:
# sched: RT throttling activated
kernel.sched_rt_runtime_us=980000

kernel.sysrq = 1                               # Enable SysRQ for rebooting the machine properly if it freezes. [Source](https://oglo.dev/tutorials/sysrq/index.html)
kernel.unprivileged_bpf_disabled = 1           # Disable unprivileged BPF

# Enable the sysctl setting kernel.unprivileged_userns_clone to allow normal users to run unprivileged containers.
kernel.unprivileged_userns_clone = 1

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Network Tweaks
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
net.core.default_qdisc = cake
#net.core.default_qdisc = fq
#net.core.default_qdisc = fq_codel

# Increase netdev receive queue
# May help prevent losing packets
net.core.netdev_max_backlog = 32768

net.core.optmem_max = 1073741824               # Maximum ancillary buffer size allowed per socket
net.core.rmem_default = 1048576                # Default socket receive buffer size
net.core.rmem_max = 1073741824                 # Maximum socket receive buffer size

# Increase the maximum connections
# The upper limit on how many connections the kernel will accept (default 4096 since kernel version 5.6):
net.core.somaxconn = 65536                     # Maximum listen queue backlog

net.core.wmem_default = 1048576                # Default socket send buffer size
net.core.wmem_max = 1073741824                 # Maximum socket send buffer size

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# IPv4 Network Configuration
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------

net.ipv4.conf.*.promote_secondaries = 1        # Promote secondary addresses when the primary address is removed
net.ipv4.conf.*.rp_filter = 2                  # Enable source route verification
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.all.secure_redirects = 0         # Disable acceptance of secure ICMP redirected packets
net.ipv4.conf.all.send_redirects = 0           # Disable sending of all IPv4 ICMP redirected packets
net.ipv4.conf.default.accept_redirects = 0     # Disable acceptance of all ICMP redirected packets (default)
net.ipv4.conf.default.log_martians = 1
net.ipv4.conf.default.promote_secondaries = 1  # Promote secondary addresses when the primary address is removed
net.ipv4.conf.default.rp_filter = 2            # Enable source route verification
net.ipv4.conf.default.secure_redirects = 0     # Disable acceptance of secure ICMP redirected packets (default)
net.ipv4.conf.default.send_redirects = 0       # Disable sending of all IPv4 ICMP redirected packets (default)
net.ipv4.ip_forward = 1                        # Enable IP forwarding

# The BBR3 congestion control algorithm can help achieve higher bandwidths and lower latencies for internet traffic
net.ipv4.tcp_congestion_control = bbr
# net.ipv4.tcp_congestion_control = bbr2
# net.ipv4.tcp_congestion_control = westwood

net.ipv4.tcp_dsack = 1                         # Enable Delayed SACK

# TCP Enable ECN Negotiation by default
net.ipv4.tcp_ecn = 1

# Enable TCP Fast Open
# TCP Fast Open is an extension to the transmission control protocol (TCP) that helps reduce network latency
# by enabling data to be exchanged during the sender’s initial TCP SYN [3].
# Using the value 3 instead of the default 1 allows TCP Fast Open for both incoming and outgoing connections:
net.ipv4.tcp_fastopen = 3

net.ipv4.tcp_fin_timeout = 25                  # Time to hold socket in FIN-WAIT-2 state (seconds)
net.ipv4.tcp_keepalive_intvl = 10              # Time between individual TCP keepalive probes (seconds)
net.ipv4.tcp_keepalive_probes = 6              # Number of TCP keepalive probes
net.ipv4.tcp_keepalive_time = 60               # Time before sending TCP keepalive probes (seconds)
net.ipv4.ip_local_port_range = 2000 65535      # Allowed local port range
net.ipv4.tcp_max_orphans = 819200              # Maximum number of TCP sockets not attached to any user file handle
net.ipv4.tcp_max_syn_backlog = 20480           # Maximum length of the listen queue for accepting new TCP connections
net.ipv4.tcp_max_tw_buckets = 1440000          # Maximum number of TIME-WAIT sockets
net.ipv4.tcp_mem = 65536 1048576 16777216      # TCP memory allocation limits
net.ipv4.tcp_mtu_probing = 1                   # Enable Path MTU Discovery
net.ipv4.tcp_notsent_lowat = 16384             # Minimum amount of data in the send queue below which TCP will send more data
net.ipv4.tcp_retries2 = 8                      # Number of times TCP retransmits unacknowledged data segments for the second SYN on a connection initiation

# Protect against tcp time-wait assassination hazards, drop RST packets for sockets in the time-wait state. Not widely supported outside of Linux, but conforms to RFC:
net.ipv4.tcp_rfc1337 = 1

net.ipv4.tcp_rmem = 4096 87380 1073741824      # TCP read memory allocation for network sockets
net.ipv4.tcp_sack = 1                          # Enable Selective Acknowledgment (SACK)

# Disable TCP slow start after idle  Helps kill persistent single connection performance
net.ipv4.tcp_slow_start_after_idle = 0

net.ipv4.tcp_synack_retries = 2                # Number of times SYNACKs for passive TCP connection.
net.ipv4.tcp_syncookies = 1

# TCP Reduce performance spikes
# Refer https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_for_real_time/7/html/tuning_guide/reduce_tcp_performance_spikes
net.ipv4.tcp_timestamps = 0

net.ipv4.tcp_window_scaling = 1                # Enable TCP window scaling
net.ipv4.tcp_wmem = 4096 87380 1073741824      # TCP write memory allocation for network sockets
net.ipv4.udp_mem = 65536 1048576 16777216      # UDP memory allocation limits
net.ipv4.ip_local_port_range = 2000 65535      # Allowed local port range
net.ipv4.tcp_rfc1337 = 1                       # Protect Against TCP Time-Wait
net.ipv4.udp_rmem_min = 16384                  # Increase the read-buffer space allocatable
net.ipv4.udp_wmem_min = 16384                  # Increase the write-buffer-space allocatable
net.ipv4.tcp_tw_reuse = 1                      # Increase the tcp-time-wait buckets pool size to prevent simple DOS attacks
net.ipv4.tcp_synack_retries = 2                # Number of times SYNACKs for passive TCP connection.

# TCP SYN cookie protection
# Helps protect against SYN flood attacks. Only kicks in when net.ipv4.tcp_max_syn_backlog is reached:
net.ipv4.tcp_syncookies = 1

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# IPv6 Network Configuration
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------

net.ipv6.conf.all.accept_redirects = 0         # Disable acceptance of all ICMP redirected packets for IPv6
net.ipv6.conf.all.disable_ipv6 = 0             # Enable IPv6
net.ipv6.conf.all.forwarding = 1               # Enable IPv6 packet forwarding
net.ipv6.conf.default.accept_redirects = 0     # Disable acceptance of all ICMP redirected packets for IPv6 (default)
net.ipv6.conf.default.disable_ipv6 = 0         # Enable IPv6

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# UNIX Domain Socket
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------

net.unix.max_dgram_qlen = 50                   # Maximum length of the UNIX domain socket datagram queue
